INFO: [MERCC-1033] Syntax checking...

Starting optimization step 0 none args="-a impl_tool=sdaccel -a skip_syntax_check=" ... 
 1 seconds 

Starting optimization step 1 lower_separate args=" -a skip_syntax_check= -a enable_cpp=  -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 
INFO: [MERCC-1034] Synthesizability checking...

Starting optimization step 2 preprocess args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on -a pure_kernel=" ... 
 1 seconds 

Starting optimization step 3 kernel_wrapper args="  -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 

Starting optimization step 4 postwrap_process args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 

Starting optimization step 5 postwrap_process args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on -a global_convert=true" ... 
 1 seconds 
INFO: [MERCC-1035] Interface synthesis...

Starting optimization step 6 interface_transform args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on -a systolic_array= -a sycl=off" ... 
 1 seconds 

Starting optimization step 7 line_buffer args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 

Starting optimization step 8 midend_preprocess args="-a auto_fgpar_opt -a auto_fgpip_opt  -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on -a loop_tiling=" ... 
 1 seconds 
INFO: [MERCC-1036] Kernel optimization...

Starting optimization step 9 memory_burst args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 
INFO: [BURST-101] Memory burst inferred: variable 'edge_index' (gcnconv.cpp:11) in scope (gcnconv.cpp:48)
  burst buffer size = 433460 bytes

WARNING: [BURST-202] Memory burst inferred: variable 'edge_index' (gcnconv.cpp:11) in scope (gcnconv.cpp:58)
  with insufficient on-chip memory (866920 bytes required)
  Hint: 1. tile large loops into smaller ones to adjust the burst buffer size
        2. specify the burst length threshold by adding interface attribute 
        'max_burst_size=?'
        3. decrease the single resource threshold by using 
        '--attribute burst_single_size_threshold=?'
        4. make range analysis accurate by changing 
         pointer parameter into array parameter in sub function
INFO: [BURST-101] Memory burst inferred: variable 'edge_index' (gcnconv.cpp:11) in scope (gcnconv.cpp:35)
  burst buffer size = 512328 bytes
INFO: [BURST-101] Memory burst inferred: variable 'edge_index' (gcnconv.cpp:11) in scope (gcnconv.cpp:63)
  burst buffer size = 866920 bytes
INFO: [BURST-101] Memory burst inferred: variable 'weight' (gcnconv.cpp:10) in scope (gcnconv.cpp:21)
  burst buffer size = 32000 bytes
INFO: [BURST-101] Memory burst inferred: variable 'x' (gcnconv.cpp:9) in scope (gcnconv.cpp:21)
  burst buffer size = 2000 bytes

WARNING: [BURST-201] Memory burst NOT inferred: variable 'result' (gcnconv.cpp:12)
  Reason: the bound of the access range is not determined (edge_index_buf_3[108365 + i] * 16..15 + edge_index_buf_3[108365 + i] * 16 exact)
  Hint: please specify the bounds of the variables using 'assert'

Starting optimization step 10 delinearization args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 

Starting optimization step 11 coarse_parallel args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 1 seconds 

Starting optimization step 12 bitwidth_opt args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on -a bus_length_threshold= -a lift_fine_grained_cache=" ... 
 1 seconds 

WARNING: [WDBUS-209] Memory coalescing variable 'x' (gcnconv.cpp:9) may cause long compilation time of downstream tool.
  Reason: the access offset is not divisible by 16

WARNING: [WDBUS-203] Suboptimal memory coalescing: variable 'edge_index' (gcnconv.cpp:11)
  Reason: the lowest dimension size of on-chip buffer is not divisible by 2
INFO: [WDBUS-101] Memory coalescing inferred: variable 'x' (gcnconv.cpp:9)
  interface bitwidth = 512 bits
INFO: [WDBUS-101] Memory coalescing inferred: variable 'weight' (gcnconv.cpp:10)
  interface bitwidth = 512 bits
INFO: [WDBUS-101] Memory coalescing inferred: variable 'result' (gcnconv.cpp:12)
  interface bitwidth = 512 bits

Starting optimization step 13 reduction_general args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 3 seconds 

Starting optimization step 14 coarse_pipeline args=" -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 3 seconds 

Starting optimization step 15 loop_parallel args="  -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 4 seconds 
INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_0_0_0'
  (gcnconv.cpp:27) 

INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_1'
  (gcnconv.cpp:35) 

INFO: [FGPIP-102] Loop fine-grained parallelization applied: loop 'L_1_0'
 (gcnconv.cpp:37) 
  parallel units:  2
INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_2'
  (gcnconv.cpp:43) 

INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_3'
  (gcnconv.cpp:48) 

INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_4'
  (gcnconv.cpp:53) 

INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_5'
  (gcnconv.cpp:58) 

INFO: [FGPIP-103] Loop fine-grained pipelining applied: loop 'L_6'
  (gcnconv.cpp:63) 

INFO: [FGPIP-102] Loop fine-grained parallelization applied: loop 'L_6_0'
 (gcnconv.cpp:65) 
  parallel units:  16

Starting optimization step 16 auto_func_inline args="-a auto_func_inline=  -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 3 seconds 

Starting optimization step 17 function_inline_by_pragma_HLS args="  -a impl_tool=sdaccel -a effort=standard -a generate_l2_api=on" ... 
 3 seconds 
INFO: [MERCC-1037] Code generation...

Starting optimization step 18 final_code_gen args="-a impl_tool=sdaccel -a mode=opencl -a naive= -a effort=standard -a volatile_flag= -a explicit_bundle= -a sycl=off" ... 
 4 seconds 

INFO: [MERCC-1040] Compilation finished successfully.
